'
'  Copyright (c) 2023 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
'
'  This program and the accompanying materials are made available under the
'  terms of the Apache License, Version 2.0 which is available at
'  https://www.apache.org/licenses/LICENSE-2.0
'
'  SPDX-License-Identifier: Apache-2.0
'
'  Contributors:
'       Bayerische Motoren Werke Aktiengesellschaft (BMW AG) - Initial Draft
'
'

@startuml

state Consumer {
  state "INITIAL" as INITIAL_consumer {
  }
  state "CONSUMER_REQUESTING" as CONSUMER_REQUESTING_consumer {
  }
  state "CONSUMER_REQUESTED" as CONSUMER_REQUESTED_consumer {
  }
  state "PROVIDER_OFFERED" as PROVIDER_OFFERED_consumer {
  }
  state "CONSUMER_AGREEING" as CONSUMER_AGREEING_consumer {
  }
  state "CONSUMER_AGREED" as CONSUMER_AGREED_consumer {
  }
  state "PROVIDER_AGREED" as PROVIDER_AGREED_consumer {
  }
  state "CONSUMER_VERIFYING" as CONSUMER_VERIFYING_consumer {
  }
  state "CONSUMER_VERIFIED" as CONSUMER_VERIFIED_consumer {
  }
  state "PROVIDER_FINALIZED" as PROVIDER_FINALIZED_consumer {
  }

  [*] --> INITIAL_consumer
  INITIAL_consumer --> CONSUMER_REQUESTING_consumer
  CONSUMER_REQUESTING_consumer --> CONSUMER_REQUESTED_consumer
  CONSUMER_REQUESTING_consumer -[dashed]-> CONSUMER_REQUESTED_provider : sends\n**ContractRequestMessage**

  CONSUMER_REQUESTED_consumer -[hidden]-> PROVIDER_OFFERED_consumer : used for layout

  PROVIDER_OFFERED_consumer --> CONSUMER_AGREEING_consumer
  PROVIDER_OFFERED_consumer --> CONSUMER_REQUESTING_consumer : counter offer
  CONSUMER_AGREEING_consumer --> CONSUMER_AGREED_consumer
  CONSUMER_AGREEING_consumer -[dashed]-> CONSUMER_AGREED_provider : sends\n**ContractNegotiationEventMessage**

  CONSUMER_AGREED_consumer --> CONSUMER_VERIFYING_consumer
  PROVIDER_AGREED_consumer --> CONSUMER_VERIFYING_consumer
  CONSUMER_VERIFYING_consumer --> CONSUMER_VERIFIED_consumer
  CONSUMER_VERIFYING_consumer -[dashed]-> CONSUMER_VERIFIED_provider : sends\n**ContractAgreementVerificationMessage**

  CONSUMER_VERIFIED_consumer -[hidden]-> PROVIDER_FINALIZED_consumer : used for layout
}

state Provider {
  state "INITIAL" as INITIAL_provider {
  }
  state "CONSUMER_REQUESTED" as CONSUMER_REQUESTED_provider {
  }
  state "PROVIDER_OFFERING" as PROVIDER_OFFERING_provider {
  }
  state "PROVIDER_OFFERED" as PROVIDER_OFFERED_provider {
  }
  state "PROVIDER_AGREEING" as PROVIDER_AGREEING_provider {
  }
  state "PROVIDER_AGREED" as PROVIDER_AGREED_provider {
  }
  state "CONSUMER_AGREED" as CONSUMER_AGREED_provider {
  }
  state "CONSUMER_VERIFIED" as CONSUMER_VERIFIED_provider {
  }
  state "PROVIDER_FINALIZING" as PROVIDER_FINALIZING_provider {
  }
  state "PROVIDER_FINALIZED" as PROVIDER_FINALIZED_provider {
  }

  [*] --> INITIAL_provider
  INITIAL_provider --> PROVIDER_OFFERING_provider
  PROVIDER_OFFERING_provider --> PROVIDER_OFFERED_provider
  PROVIDER_OFFERING_provider -[dashed]-> PROVIDER_OFFERED_consumer : sends\n**ContractOfferMessage**
  CONSUMER_REQUESTED_provider --> PROVIDER_AGREEING_provider
  CONSUMER_REQUESTED_provider --> PROVIDER_OFFERING_provider : counter offer
  PROVIDER_AGREEING_provider --> PROVIDER_AGREED_provider
  PROVIDER_AGREEING_provider -[dashed]-> PROVIDER_AGREED_consumer : sends\n**ContractAgreementMessage**

  PROVIDER_OFFERING_provider -[hidden]-> CONSUMER_REQUESTED_provider : used for layout
  PROVIDER_AGREEING_provider -[hidden]-> CONSUMER_AGREED_provider : used for layout
  PROVIDER_AGREED_provider -[hidden]-> CONSUMER_VERIFIED_provider : used for layout

  CONSUMER_VERIFIED_provider --> PROVIDER_FINALIZING_provider
  PROVIDER_FINALIZING_provider --> PROVIDER_FINALIZED_provider
  PROVIDER_FINALIZING_provider -[dashed]-> PROVIDER_FINALIZED_consumer : sends\n**ContractNegotiationEventMessage**

}


@enduml
